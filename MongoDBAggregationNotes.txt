
City:Collection
__________________________
city_id ,
city_name ,
population,
mean_income ,
PRIMARY KEY (city_id)

*************
Customer: Collection
______________________
customer_id,
first_name,
last_name ,
date_of_birth ,
gender,
city_id,
PRIMARY KEY (customer_id),
FOREIGN KEY (city_id) REFERENCES city(city_id)




Aggregation

$match is equvalient to where clause in sql

db.customer.aggregate(
    [ { $match : { city_id : 3 } } ]
);

db.customer.aggregate(
    [ { $match : { $and:[{city_id:2},{last_name: {"$eq" :"Kumar"}}] } } ]
);


db.customer.aggregate(
 [
  {
       "$project":{first_name:1}
  }
 ]
)

Note: $project is used only when selected columns to be displayed
1 here means true(include) and 0 means false(exclude)

Using project and $match

db.customer.aggregate(
 [
  {
     "$match":
     {
        city_id:3
     }
  },
  {
       "$project":
     {
         first_name : 1,last_name:1,date_of_birth:1
     }
  }
 ]
)



db.customer.aggregate([
    {
        $group: {
            _id: "$city_id",
            total_customers: { $sum: 1 },
            average_income: { $avg: "$city.mean_income" }
        }
    }
])




Matching Documents Based on city_name and Sorting by date_of_birth
db.customer.aggregate([
    {
        $match: { "city.city_name": "Bangalore" }
    },
    {
        $sort: { date_of_birth: 1 }
    }
])


Combining Match, Group, and Sort:

db.customer.aggregate([
    {
        $match: { gender: "female" }
    },
    {
        $group: {
            _id: "$city.city_name",
            total_customers: { $sum: 1 }
        }
    },


    {
        $sort: { total_customers: -1 }
    }


}
])